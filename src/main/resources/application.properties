# ===============================
# = DATA SOURCE
# ===============================
# Set here configurations for the database connection
#?serverTimezone=UTC
#spring.datasource.driver-class-name = com.mysql.cj.jdbc.Driver
#Local setup
spring.datasource.url=jdbc:mysql://localhost:3306/dayliv?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC
spring.datasource.username=root
spring.datasource.password=

#Heroku Setup
#spring.datasource.url=jdbc:mysql://bb86c1c31295bc:cd8fc2c2@us-cdbr-east-03.cleardb.com/heroku_1cbd4ed6c9b041d?reconnect=true
#spring.main.allow-bean-definition-overriding=true
#spring.datasource.username=bb86c1c31295bc
#spring.datasource.password=cd8fc2c2

#AWS Setup

#spring.datasource.url=jdbc:mysql://dayliv.ceon6toxxe5d.us-east-2.rds.amazonaws.com:3306/dayliv?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC
#spring.datasource.username=dayliv
"spring.datasource.password=dayliv2021


app.jwt.secret=ArbitrarySecretKey

#1 day
app.jwt.expiration-in-ms=86400000
security.basic.enable: false
app.jwt.token.prefix=Bearer
security.ignored=/**
app.jwt.header.string=Authorization
#spring.datasource.driver-class-name=com.mysql.jdbc.Driver //deprecated utiliser déjà par défaut.
#ce n'est pas la peine d'activer la cache
spring.thymeleaf.cache=false 
# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle=true
spring.datasource.validationQuery=SELECT 1
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
# Social login provider props
spring.security.oauth2.client.registration.google.clientId=740676507096-4nagcgjfouktfuksqnbujn4vebkokoui.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.clientSecret=8m75UWeTBXVUxAFefXtl-kJ5
spring.security.oauth2.client.registration.facebook.clientId=<your-client-id>
spring.security.oauth2.client.registration.facebook.clientSecret=<your-client-secret>
spring.security.oauth2.client.provider.facebook.user-info-uri=https://graph.facebook.com/me?fields=id,name,email,picture
app.auth.tokenSecret=926D96C90030DD58429D2751AC1BDBBC
app.auth.tokenExpirationMsec=864000000
    # After successfully authenticating with the OAuth2 Provider,
    # we'll be generating an auth token for the user and sending the token to the
    # redirectUri mentio	ned by the frontend client in the /oauth2/authorization request.
    # We're not using cookies because they won't work well in mobile clients.
app.oauth2.authorizedRedirectUris=http://localhost:4200/oauth2/redirect,myandroidapp://oauth2/redirect,myiosapp://oauth2/redirect
# For detailed logging during development
#logging.level.com=TRACE
logging.level.org.springframework=TRACE
#logging.level.org.hibernate.SQL=TRACE
#logging.level.org.hibernate.type=TRACE

# ===============================
# = JPA / HIBERNATE
# ===============================
# Show or not log for each sql query
spring.jpa.show-sql=true
# Hibernate ddl auto (create, create-drop, update): with "create-drop" the database
# schema will be automatically created afresh for every start of application
spring.jpa.hibernate.ddl-auto=update
logging.level.org.springframework.web=DEBUG
# Naming strategy
spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyHbmImpl
spring.jpa.hibernate.naming.physical-strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy
# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect

server.port = 5000

debug=true

spring.mail.host=smtp.gmail.com
spring.mail.port=25
spring.mail.username=geek.webfreelance@gmail.com
spring.mail.password=wjdmbinuqkdwqyms

# Other properties
spring.mail.properties.mail.debug=true
spring.mail.properties.mail.transport.protocol=smtp
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=5000
spring.mail.properties.mail.smtp.writetimeout=5000

# TLS , port 587
spring.mail.properties.mail.smtp.starttls.enable=true

# SSL, post 465
#spring.mail.properties.mail.smtp.socketFactory.port = 465
#spring.mail.properties.mail.smtp.socketFactory.class = javax.net.ssl.SSLSocketFactory
